@model JunkOut.Models.OrdersViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Order</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.order.ID)

        @Html.HiddenFor(model => model.customer.ID)

        @Html.HiddenFor(model => model.address.ID)


        <div class="form-group">
            @Html.LabelFor(model => model.customer.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.FirstName, "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.customer.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.LastName, "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.customer.CompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.CompanyName, "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.customer.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.Email, "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.customer.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.PhoneNumber, "", new { @class = "text-danger" })


            </div>
        </div>




        <div class="form-group">
            @Html.LabelFor(model => model.address.StreetAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.StreetAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address.StreetAddress, "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address.AptNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.AptNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address.AptNum, "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address.City, "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address.Province, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.Province, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address.Province, "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.Country, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address.Country, "", new { @class = "text-danger" })


            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.address.PostalCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address.PostalCode, "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address.AddressType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    List<SelectListItem> listAddressType = new List<SelectListItem>();
                    listAddressType.Add(new SelectListItem
                    {
                        Text = "Residential",
                        Value = "Residential"
                    });
                    listAddressType.Add(new SelectListItem
                    {
                        Text = "Construction Site",
                        Value = "Construction Site",
                        Selected = true
                    });
                    listAddressType.Add(new SelectListItem
                    {
                        Text = "Commercial",
                        Value = "Commercial"
                    });
                    listAddressType.Add(new SelectListItem
                    {
                        Text = "Retail",
                        Value = "Retail"
                    });
                    listAddressType.Add(new SelectListItem
                    {
                        Text = "Others",
                        Value = "Others"
                    });

                }

                @Html.DropDownListFor(model => model.address.AddressType, listAddressType, "-- Address Type --")
                @Html.ValidationMessageFor(model => model.address.AddressType, "", new { @class = "text-danger" })






            </div>
        </div>





        <div class="form-group">
            @Html.LabelFor(model => model.order.JobType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    List<SelectListItem> listJobType = new List<SelectListItem>();
                    listJobType.Add(new SelectListItem
                    {
                        Text = "Junk Removal",
                        Value = "Junk Removal"
                    });
                    listJobType.Add(new SelectListItem
                    {
                        Text = "Bin Rental",
                        Value = "Bin Rental",
                        Selected = true
                    });
                    listJobType.Add(new SelectListItem
                    {
                        Text = "Demolition",
                        Value = "Demolition"
                    });

                }

                @Html.DropDownListFor(model => model.order.JobType, listJobType, "-- Job Type --")
                @Html.ValidationMessageFor(model => model.order.JobType, "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.order.DeliveryDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                <div class="input-group" id="datetimepicker">
                    @Html.EditorFor(model => model.order.DeliveryDateTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.order.DeliveryDateTime, "", new { @class = "text-danger" })


                </div>




            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.order.PickupDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.order.PickupDateTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.order.PickupDateTime, "", new { @class = "text-danger" })


            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.order.HearingSource, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">



                @{
                    List<SelectListItem> listItems = new List<SelectListItem>();
                    listItems.Add(new SelectListItem
                    {
                        Text = "Referral",
                        Value = "Referral"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Website",
                        Value = "Website",
                        Selected = true
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Bins",
                        Value = "Bins"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Saw truck",
                        Value = "Saw truck"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Lawn Sign",
                        Value = "Lawn Sign",
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Referral / Friend",
                        Value = "Referral / Friend"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Others",
                        Value = "Others"
                    });
                }

                @Html.DropDownListFor(model => model.order.HearingSource, listItems, "-- Select Source --")
                @Html.ValidationMessageFor(model => model.order.HearingSource, "", new { @class = "text-danger" })


            </div>
        </div>








        <div class="form-group">
            @Html.LabelFor(model => model.order.OrderNotes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.order.OrderNotes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.order.OrderNotes, "", new { @class = "text-danger" })


            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.order.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">



                @{
                    List<SelectListItem> listStatus = new List<SelectListItem>();
                    listStatus.Add(new SelectListItem
                    {
                        Text = "New",
                        Value = "New"
                    });
                    listStatus.Add(new SelectListItem
                    {
                        Text = "Pending",
                        Value = "Pending",
                        Selected = true
                    });
                    listStatus.Add(new SelectListItem
                    {
                        Text = "Confirmed",
                        Value = "Confirmed"
                    });
                    listStatus.Add(new SelectListItem
                    {
                        Text = "Delivered",
                        Value = "Delivered"
                    });
                    listStatus.Add(new SelectListItem
                    {
                        Text = "Completed",
                        Value = "Completed",
                    });

                }

                @Html.DropDownListFor(model => model.order.Status, listStatus, "-- Select Status --")
                @Html.ValidationMessageFor(model => model.order.Status, "", new { @class = "text-danger" })


            </div>
        </div>


        @Html.HiddenFor(model => model.order.SourceOfOrdering)




        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
                    }

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}




