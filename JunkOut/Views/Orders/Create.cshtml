@model JunkOut.Models.OrdersViewModel

@{
    ViewBag.Title = "Place Order";
}
<style>
    input:invalid {
        border: 2px dashed red;
    }

</style>

<h2>Place new order</h2>
<h2 style="color:red; background-color:yellow; display:inline-block">@ViewBag.Message</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Orders</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.customer.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.customer.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.customer.CompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.CompanyName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.customer.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.customer.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.customer.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.customer.PhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.address.StreetAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.StreetAddress, new { htmlAttributes = new { @class = "form-control", id = "StreetAddress" } })
                @Html.ValidationMessageFor(model => model.address.StreetAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address.AptNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.AptNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address.AptNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.City, new { htmlAttributes = new { @class = "form-control", id = "City" } })
                @Html.ValidationMessageFor(model => model.address.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address.Province, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.Province, new { htmlAttributes = new { @class = "form-control", id = "Province" } })
                @Html.ValidationMessageFor(model => model.address.Province, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.Country, new { htmlAttributes = new { @class = "form-control", id = "Country" } })
                @Html.ValidationMessageFor(model => model.address.Country, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.address.PostalCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address.PostalCode, new { htmlAttributes = new { @class = "form-control", id = "PostalCode" } })
                @Html.ValidationMessageFor(model => model.address.PostalCode, "", new { @class = "text-danger" })<span class="glyphicon glyphicon-search" id="postalIcon"></span>
                
                <br />
                <button type="button" value="Verify" class="btn btn-danger" id="go">Verify Postal Code</button> 
            </div>
       </div>
        <div class="form-group">
            @Html.LabelFor(model => model.address.AddressType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    List<SelectListItem> listAddressType = new List<SelectListItem>();
                    listAddressType.Add(new SelectListItem
                    {
                        Text = "Residential",
                        Value = "Residential"
                    });
                    listAddressType.Add(new SelectListItem
                    {
                        Text = "Construction Site",
                        Value = "Construction Site",
                        Selected = true
                    });
                    listAddressType.Add(new SelectListItem
                    {
                        Text = "Commercial",
                        Value = "Commercial"
                    });
                    listAddressType.Add(new SelectListItem
                    {
                        Text = "Retail",
                        Value = "Retail"
                    });
                    listAddressType.Add(new SelectListItem
                    {
                        Text = "Others",
                        Value = "Others"
                    });
                }
                @Html.DropDownListFor(model => model.address.AddressType, listAddressType, "-- Address Type --")
                @Html.ValidationMessageFor(model => model.address.AddressType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.order.JobType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    List<SelectListItem> listJobType = new List<SelectListItem>();
                    listJobType.Add(new SelectListItem
                    {
                        Text = "Junk Removal",
                        Value = "Junk Removal"
                    });
                    listJobType.Add(new SelectListItem
                    {
                        Text = "Bin Rental",
                        Value = "Bin Rental",
                        Selected = true
                    });
                    listJobType.Add(new SelectListItem
                    {
                        Text = "Demolition",
                        Value = "Demolition"
                    });

                }
                @Html.DropDownListFor(model => model.order.JobType, listJobType, "-- Job Type --")
                @Html.ValidationMessageFor(model => model.order.JobType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.order.DeliveryDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                <div class="input-group" id="datetimepicker">
                    @*@Html.EditorFor(model => model.order.DeliveryDateTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.order.DeliveryDateTime, "", new { @class = "text-danger" })*@
                    <input type="datetime-local" id="del" name="delivery" style="color: black" required>
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.order.PickupDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.order.PickupDateTime, new { htmlAttributes = new { @class = "form-control" } })*@
                @*@Html.ValidationMessageFor(model => model.order.PickupDateTime, "", new { @class = "text-danger" })*@
                <input type="datetime-local" id="pickup" name="pickup" style="color: black" required>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.order.HearingSource, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    List<SelectListItem> listItems = new List<SelectListItem>();
                    listItems.Add(new SelectListItem
                    {
                        Text = "Referral",
                        Value = "Referral"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Website",
                        Value = "Website",
                        Selected = true
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Bins",
                        Value = "Bins"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Saw truck",
                        Value = "Saw truck"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Lawn Sign",
                        Value = "Lawn Sign",
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Referral / Friend",
                        Value = "Referral / Friend"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "Others",
                        Value = "Others"
                    });
                }
                @Html.DropDownListFor(model => model.order.HearingSource, listItems, "-- Select Source --")
                @Html.ValidationMessageFor(model => model.order.HearingSource, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.order.OrderNotes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.order.OrderNotes, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Place Order" class="btn btn-success" id="create" />
            </div>
        </div>
    </div>
  }

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {

    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCv-x3Oo0fLyDiLzOtZ9D47_oQUq02TNrY&libraries=places"></script>

    <script type="text/javascript">

        google.maps.event.addDomListener(window, 'load', function () {

           var input = document.getElementById('StreetAddress');
            var options = {
                componentRestrictions: { country: 'CA' }
            };

            var places = new google.maps.places.Autocomplete(input, options);

            google.maps.event.addListener(places, 'place_changed', function () {
                var place = places.getPlace();
                var address = place.formatted_address;
                var value = address.split(",");
                count = value.length;
                streetAddress = value[0]
                country = value[count - 1];
                state = value[count - 2];
                city = value[count - 3];
                var z = state.split(" ");
                document.getElementById("Country").value = country;
                var i = z.length;
                document.getElementById("Province").value = z[1];
                if (i > 2)
                    document.getElementById("PostalCode").value = z[2] + z[3];
                document.getElementById("City").value = city;

                var mesg = address;
                document.getElementById("StreetAddress").value = streetAddress;

            });
        });

        $("#go").click(function () {
            var reg1 = /^([A-Za-z][0-9][A-Za-z] [0-9][A-Za-z][0-9])$/;
            var reg2 = /^([A-Za-z][0-9][A-Za-z][0-9][A-Za-z][0-9])$/;
            if (reg1.test($('#PostalCode').val()) || reg2.test($('#PostalCode').val())) {
                var ucp = ($("#PostalCode").val().toUpperCase());
                var p3 = ucp.substring(0, 3);

                var greenarea = ["L0J", "L0P", "L2H", "L2J", "L3B", "L3R", "L3T", "L3Z", "L4A", "L4B", "L4C", "L4E", "L4H", "L4J", "L4K", "L4L", "L4R", "L4T", "L4V", "L4W", "L4X", "L4Y", "L4Z", "L5A", "L5B", "L5C", "L5E", "L5G", "L5H", "L5J", "L5K", "L5L", "L5M", "L5N", "L5P", "L5R", "L5S", "L5T", "L5V", "L5W", "L6A", "L6G", "L6H", "L6J", "L6K", "L6L", "L6M", "L6P", "L6R", "L6S", "L6T", "L6V", "L6W", "L6X", "L6Y", "L6Z", "L7A", "L7G", "L7K", "L8G", "L9X", "L9Y", "M1G", "M1H", "M1J", "M1K", "M1L", "M1M", "M1N", "M1P", "M1R", "M1S", "M1T", "M1V", "M1W", "M2H", "M2J", "M2K", "M2L", "M2M", "M2N", "M2P", "M2R", "M3A", "M3B", "M3C", "M3H", "M3J", "M3K", "M3L", "M3M", "M3N", "M4A", "M4B", "M4C", "M4E", "M4G", "M4H", "M4J", "M4K", "M4L", "M4M", "M4N", "M4P", "M4R", "M4S", "M4T", "M4V", "M4W", "M4X", "M4Y", "M5A", "M5B", "M5C", "M5E", "M5G", "M5H", "M5J", "M5K", "M5L", "M5M", "M5N", "M5P", "M5R", "M5S", "M5T", "M5V", "M5W", "M5X", "M6A", "M6B", "M6C", "M6E", "M6G", "M6H", "M6J", "M6K", "M6L", "M6M", "M6N", "M6P", "M6R", "M6S", "M7A", "M7Y", "M8V", "M8W", "M8X", "M8Y", "M8Z", "M9A", "M9B", "M9C", "M9L", "M9M", "M9N", "M9P", "M9R", "M9V", "M9W", "V8G"];
                var grayarea = ["L3P", "L3S", "L4G", "L4S", "L6B", "L6C", "L6E", "L7B", "L7C", "L7E", "L7J", "L7L", "L7M", "L7N", "L7P", "L7R", "L8E", "L8N", "L9A", "L9E", "L9T", "M1B", "M1C", "M1E", "M1X", "N1E"];

                var iSelector = $("#postalIcon");

                if ($.inArray(p3, greenarea) == -1) {
                    if ($.inArray(p3, grayarea) >= 0) {
                        iSelector.removeClass('glyphicon glyphicon-search');
                        iSelector.toggleClass('glyphicon glyphicon-warning-sign');
                        iSelector.css("color", "#ffcc00");
                        iSelector.text(" Extra charges of $25 apply");
                        $("#slide-1").hide();
                        $("#slide-2").show('slow');
                        $("input[type=submit]").removeAttr('disabled');

                    }
                    else {
                        iSelector.removeClass('glyphicon glyphicon-search');
                        iSelector.toggleClass('glyphicon glyphicon-remove');
                        iSelector.css("color", "red");
                        iSelector.text(" Out of the Service Region");
                        $("input[type=submit]").attr("disabled", "disabled");
                    }
                }
                else {
                    $("#slide-1").hide();
                    $("#slide-2").show('slow');
                    $(".progressbar li:nth-child(2)").addClass("active");
                    $("input[type=submit]").removeAttr('disabled');
                                
                    iSelector.removeClass('glyphicon glyphicon-search'); 
                    iSelector.toggleClass('glyphicon glyphicon-ok');
                    iSelector.css("color", "green");
                    iSelector.text(" We provide Service in this area");

                }
            }
            else {
                alert("Please enter into the formal of A9A 9A9");
            }
        });
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}

